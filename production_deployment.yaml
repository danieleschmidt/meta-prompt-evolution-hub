# Production Deployment Configuration for Sentiment Analyzer Pro
# Kubernetes deployment with auto-scaling, monitoring, and high availability

apiVersion: v1
kind: Namespace
metadata:
  name: sentiment-analyzer
  labels:
    app: sentiment-analyzer-pro
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sentiment-analyzer-config
  namespace: sentiment-analyzer
data:
  # Application settings
  POPULATION_SIZE: "100"
  MUTATION_RATE: "0.05"
  CACHE_SIZE: "50000"
  CACHE_TTL: "3600"
  MIN_WORKERS: "8"
  MAX_WORKERS: "32"
  RATE_LIMIT_RPM: "10000"
  MAX_TEXT_LENGTH: "10000"
  
  # Performance settings
  ENABLE_CACHING: "true"
  ENABLE_DISTRIBUTED_CACHE: "true"
  ENABLE_MONITORING: "true"
  BATCH_SIZE: "100"
  MAX_CONCURRENCY: "50"
  
  # Redis configuration
  REDIS_URL: "redis://redis-service:6379"
  REDIS_MAX_CONNECTIONS: "100"
  
  # Monitoring
  PROMETHEUS_PORT: "9090"
  HEALTH_CHECK_PORT: "8080"
  METRICS_ENABLED: "true"
  
  # Logging
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: sentiment-analyzer-secrets
  namespace: sentiment-analyzer
type: Opaque
data:
  # Base64 encoded values (replace with actual secrets)
  API_KEY: "YOUR_API_KEY_BASE64_ENCODED"
  REDIS_PASSWORD: "YOUR_REDIS_PASSWORD_BASE64_ENCODED"

---
# Redis deployment for caching
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: sentiment-analyzer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server"]
        args: ["--maxmemory", "2gb", "--maxmemory-policy", "allkeys-lru"]
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          timeoutSeconds: 1

---
# Redis service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: sentiment-analyzer
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Main application deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sentiment-analyzer
  namespace: sentiment-analyzer
  labels:
    app: sentiment-analyzer-pro
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sentiment-analyzer-pro
  template:
    metadata:
      labels:
        app: sentiment-analyzer-pro
    spec:
      containers:
      - name: sentiment-analyzer
        image: sentiment-analyzer-pro:latest
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8080
          name: health
        - containerPort: 9090
          name: metrics
        
        env:
        - name: PORT
          value: "8000"
        - name: ENVIRONMENT
          value: "production"
        
        envFrom:
        - configMapRef:
            name: sentiment-analyzer-config
        - secretRef:
            name: sentiment-analyzer-secrets
        
        resources:
          limits:
            memory: "2Gi"
            cpu: "2000m"
          requests:
            memory: "1Gi"
            cpu: "1000m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Graceful shutdown
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts for temporary files
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
      
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      
      # Security and scheduling
      securityContext:
        fsGroup: 1000
      
      # Node scheduling preferences
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sentiment-analyzer-pro
              topologyKey: kubernetes.io/hostname

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sentiment-analyzer-hpa
  namespace: sentiment-analyzer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sentiment-analyzer
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Service for the application
apiVersion: v1
kind: Service
metadata:
  name: sentiment-analyzer-service
  namespace: sentiment-analyzer
  labels:
    app: sentiment-analyzer-pro
spec:
  selector:
    app: sentiment-analyzer-pro
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: health
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sentiment-analyzer-ingress
  namespace: sentiment-analyzer
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - sentiment-api.yourdomain.com
    secretName: sentiment-analyzer-tls
  rules:
  - host: sentiment-api.yourdomain.com
    http:
      paths:
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: sentiment-analyzer-service
            port:
              number: 80

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: sentiment-analyzer-metrics
  namespace: sentiment-analyzer
  labels:
    app: sentiment-analyzer-pro
spec:
  selector:
    matchLabels:
      app: sentiment-analyzer-pro
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# PodDisruptionBudget for availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sentiment-analyzer-pdb
  namespace: sentiment-analyzer
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sentiment-analyzer-pro

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sentiment-analyzer-netpol
  namespace: sentiment-analyzer
spec:
  podSelector:
    matchLabels:
      app: sentiment-analyzer-pro
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53