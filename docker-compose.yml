# Docker Compose for local development and testing
# Production-like environment with all services

version: '3.8'

services:
  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: sentiment-redis
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # Main sentiment analyzer service
  sentiment-analyzer:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-2025-01-01T00:00:00Z}
        VERSION: ${VERSION:-dev}
        VCS_REF: ${VCS_REF:-dev}
    container_name: sentiment-analyzer
    ports:
      - "8000:8000"  # Main API
      - "8080:8080"  # Health checks
      - "9090:9090"  # Metrics
    environment:
      # Application settings
      PORT: 8000
      HEALTH_CHECK_PORT: 8080
      PROMETHEUS_PORT: 9090
      
      # Performance tuning
      POPULATION_SIZE: 50
      MUTATION_RATE: 0.1
      CACHE_SIZE: 10000
      CACHE_TTL: 1800
      MIN_WORKERS: 4
      MAX_WORKERS: 12
      RATE_LIMIT_RPM: 1000
      MAX_TEXT_LENGTH: 5000
      
      # Features
      ENABLE_CACHING: "true"
      ENABLE_DISTRIBUTED_CACHE: "true"
      ENABLE_MONITORING: "true"
      
      # Redis connection
      REDIS_URL: "redis://redis:6379"
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: sentiment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - sentiment-analyzer
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sentiment-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sentiment-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # Load testing service (optional)
  load-tester:
    image: locustio/locust:latest
    container_name: sentiment-load-tester
    ports:
      - "8089:8089"
    volumes:
      - ./load_tests:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host=http://sentiment-analyzer:8000
    depends_on:
      - sentiment-analyzer
    profiles:
      - testing

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: sentiment-analyzer-network